name: release

on:
  push:
    tags:
    - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          asset_suffix: -x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/gzip
        - os: macos-latest
          asset_suffix: -x86_64-apple-darwin.tar.gz
          asset_content_type: application/gzip
        - os: windows-latest
          asset_suffix: -x86_64-pc-windows-msvc.zip
          asset_content_type: application/zip
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: choco install zip

    - name: Build
      run: cargo build --release --locked

    - name: Get tag
      id: get_tag
      run: echo ::set-output name=tag::${GITHUB_REF##*/}
      shell: bash

    - name: Make asset name
      id: make_asset_name
      run: echo ::set-output name=asset_name::mrf-${{ steps.get_tag.outputs.tag }}${{ matrix.asset_suffix }}
      shell: bash

    - name: Package
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        cd target/release
        tar -czvf ${{ steps.make_asset_name.outputs.asset_name }} mrf

    - name: Package
      if: matrix.os == 'windows-latest'
      run: |
        cd target/release
        zip ${{ steps.make_asset_name.outputs.asset_name }} mrf.exe

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: target/release/${{ steps.make_asset_name.outputs.asset_name }}
        asset_name: ${{ steps.make_asset_name.outputs.asset_name }}
        asset_content_type: ${{ matrix.asset_content_type }}
